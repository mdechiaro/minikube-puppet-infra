# Build a Puppet stack in minikube

This started out as weekend project to learn Kubernetes using minikube.
This project creates a multi-node Puppet stack. The configs are managed
with r10k and https://github.com/mdechiaro/puppet-control-repo.

This is not for production use.

## TODO (in no order)
* Add dashboards (puppetboard, prometheus)
* Add psql database replication
* Add puppetdb replication
* Add puppetca replication
* Add choria orchestrator
* Add a webhook or self-hosted runner for CI/CD on control repo

## Current Stack
```
# kubectl get pods -A
NAMESPACE     NAME                               READY   STATUS    RESTARTS        AGE
default       dnsutils                           1/1     Running   0               73m
default       psql-dcc7bbc66-5jl6w               1/1     Running   0               73m
default       puppetca-78f7c89c8f-v6wjn          1/1     Running   0               73m
default       puppetdb-dbdbcc8bb-wxkq2           1/1     Running   0               45m
default       puppetserver-6d56786d58-89jtb      1/1     Running   0               50m
default       puppetserver-6d56786d58-dlzn6      1/1     Running   0               50m
default       puppetserver-6d56786d58-qc2x5      1/1     Running   0               50m
```

## Setup minikube image cache to faster deployments

```
minikube image load registry.k8s.io/e2e-test-images/jessie-dnsutils:1.3
minikube image load ghcr.io/voxpupuli/container-puppetdb
minikube image load ghcr.io/voxpupuli/container-puppetserver
minikube image load postgres
```

## Prep

```
minikube config set cpus 4
minikube config set memory 8192
```

## Apply deployment specs in puppet/ directory

```
kubectl apply -f puppet/
```

Use `minikube tunnel` in second terminal to test services with telnet
outside of minikube. Use `kubectl get services` to get those external
IPs. If external IPs are `<pending>`, then tunnel isn't setup yet.

You can verify dns is working with:

```
kubectl exec -i -t dnsutils -- nslookup <service>
```

## Cleanup

```
kubectl delete all --all
kubectl get pvc | grep -v NAME | awk '{print $1}' | xargs kubectl delete pvc
kubectl get pv | grep -v NAME | awk '{print $1}' | xargs kubectl delete pv
kubectl get configmap | grep -v "NAME\|kube-root-ca.crt" | awk '{print $1}' | xargs kubectl delete configmap
```

## Workaround for iptables

If you have docker and lxd / lxc installed on same machine.

```
# https://discuss.linuxcontainers.org/t/lxd-and-docker-firewall-redux-how-to-deal-with-forward-policy-set-to-drop/9953
sudo iptables -I DOCKER-USER  -j ACCEPT
sudo iptables-save
```
